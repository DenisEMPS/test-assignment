// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth/auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	domain "github.com/DenisEMPS/test-assignment/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// DeleteRefreshTokenRecord mocks base method.
func (m *MockAuthRepository) DeleteRefreshTokenRecord(ctx context.Context, userID, accessID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenRecord", ctx, userID, accessID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenRecord indicates an expected call of DeleteRefreshTokenRecord.
func (mr *MockAuthRepositoryMockRecorder) DeleteRefreshTokenRecord(ctx, userID, accessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenRecord", reflect.TypeOf((*MockAuthRepository)(nil).DeleteRefreshTokenRecord), ctx, userID, accessID)
}

// GetRefreshTokenRecord mocks base method.
func (m *MockAuthRepository) GetRefreshTokenRecord(ctx context.Context, userID, accessID uuid.UUID) (*domain.RefreshTokenRecordDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenRecord", ctx, userID, accessID)
	ret0, _ := ret[0].(*domain.RefreshTokenRecordDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenRecord indicates an expected call of GetRefreshTokenRecord.
func (mr *MockAuthRepositoryMockRecorder) GetRefreshTokenRecord(ctx, userID, accessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenRecord", reflect.TypeOf((*MockAuthRepository)(nil).GetRefreshTokenRecord), ctx, userID, accessID)
}

// SaveRefreshTokenRecord mocks base method.
func (m *MockAuthRepository) SaveRefreshTokenRecord(ctx context.Context, tokenRecord *domain.RefreshTokenRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshTokenRecord", ctx, tokenRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshTokenRecord indicates an expected call of SaveRefreshTokenRecord.
func (mr *MockAuthRepositoryMockRecorder) SaveRefreshTokenRecord(ctx, tokenRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshTokenRecord", reflect.TypeOf((*MockAuthRepository)(nil).SaveRefreshTokenRecord), ctx, tokenRecord)
}
