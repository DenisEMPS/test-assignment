version: "3.9"

services:

  auth:
    build:
      context: .
    container_name: auth
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
      - REFRESH_TOKEN_TTL=${REFRESH_TOKEN_TTL}
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - back
    healthcheck:
      test: ["CMD-SHELL", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:17-alpine3.21
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/:/docker-entrypoint-initdb.d 
    user:
      postgres
    networks:
      - back
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 20s

networks:
  back:
    driver: bridge

volumes:
  postgres_data: